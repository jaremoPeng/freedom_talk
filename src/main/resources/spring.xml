<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
     ">
    <context:component-scan base-package="com.jaremo.freedom_talk">
        <!-- 在根配置文件中,需要排除@Controller -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>

    <!-- 引入其他的spring配置文件 -->
    <!--<import resource="classpath:spring-redis.xml" />-->

    <!-- redis的配置 -->
    <!-- 引入redis的配置文件 -->
    <context:property-placeholder location="classpath:redisConf.properties"></context:property-placeholder>
    <!-- jedis的配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"></property>
        <property name="maxWaitMillis" value="${redis.maxWait}"></property>
        <property name="testOnBorrow" value="true"></property>
        <property name="maxTotal" value="${redis.maxTotal}"></property>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="jedisPoolConfig"></property>
        <property name="hostName" value="${redis.host}"></property>
        <property name="password" value="${redis.password}"></property>
        <property name="port" value="${redis.port}"></property>
        <property name="timeout" value="${redis.timeout}"></property>
        <property name="usePool" value="true"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
        </property>
        <!-- 开启REIDS事务支持 -->
        <property name="enableTransactionSupport" value="false" />
    </bean>

    <!-- 注入redisTemplate -->
    <bean id="redisUtil" class="com.jaremo.freedom_talk.utils.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate"></property>
    </bean>
    <!--&lt;!&ndash; 对string操作的封装 &ndash;&gt;-->
    <!--<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
        <!--<constructor-arg ref="jedisConnectionFactory" />-->
        <!--&lt;!&ndash; 开启REIDS事务支持 &ndash;&gt;-->
        <!--<property name="enableTransactionSupport" value="false" />-->
    <!--</bean>-->

    <!-- 数据库的连接
       配置数据源
   -->
    <context:property-placeholder location="classpath:mysqlconf.properties"></context:property-placeholder>
    <!-- 使用的连接池为ali 的druid连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driverClass}"></property>
        <property name="url" value="${url}"></property>
        <property name="username" value="${user}"></property>
        <property name="password" value="${pwd}"></property>
        <!--
            initialSize 设置初始化连接数
            maxActive 设置最大的连接数
            maxIdle 设置最大的空闲连接数
            filters 开启sql统计功能
        -->
        <property name="initialSize" value="1"></property>
        <property name="maxActive" value="200"></property>
        <property name="maxIdle" value="50"></property>
        <property name="filters" value="stat"></property>
    </bean>

    <!-- 应用mybatis -->
    <!-- sqlSessionFactoryBean相当于 SqlSessionFactory -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 相当于mybatis中的Sqlsession -->
    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
    </bean>
    <!-- 既然做ssm集成那么就免去mybatis的配置文件 , 这个bean是读取mybatis的接口映射的  -->
    <bean id="scannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jaremo.test_shiro.ssshiro.dao"></property>
    </bean>

    <!-- 操作事务,应在service层 , 故在spring根配置文件中配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 所有的安全管理 都需进入这个类-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm"/>
    </bean>
    <!--  为了关闭 securityManager-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- shiro在spring中的配置 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/shiropage/login.html"/>
        <property name="successUrl" value="/shiropage/suc.jsp"/>
        <property name="unauthorizedUrl" value="/un.jsp"/>
        <property name="filters">
            <util:map>
                <entry key="myfilter" value-ref="verifyFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /**=myfilter <!-- 使用自定义安全过滤器 -->
            </value>
        </property>
    </bean>

    <!-- 设置隔离级别 -->
    <tx:advice id="txadvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- aop配置 -->
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.*..*.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txadvice" pointcut-ref="pointcut"/>
    </aop:config>
</beans>